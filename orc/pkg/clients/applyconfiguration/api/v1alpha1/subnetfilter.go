/*
Copyright 2024 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/k-orc/openstack-resource-controller/api/v1alpha1"
)

// SubnetFilterApplyConfiguration represents a declarative configuration of the SubnetFilter type for use
// with apply.
type SubnetFilterApplyConfiguration struct {
	Name                                  *v1alpha1.OpenStackName        `json:"name,omitempty"`
	Description                           *v1alpha1.OpenStackDescription `json:"description,omitempty"`
	ProjectID                             *v1alpha1.UUID                 `json:"projectID,omitempty"`
	IPVersion                             *v1alpha1.IPVersion            `json:"ipVersion,omitempty"`
	GatewayIP                             *v1alpha1.IPvAny               `json:"gatewayIP,omitempty"`
	CIDR                                  *v1alpha1.CIDR                 `json:"cidr,omitempty"`
	IPv6                                  *IPv6OptionsApplyConfiguration `json:"ipv6,omitempty"`
	FilterByNeutronTagsApplyConfiguration `json:",inline"`
}

// SubnetFilterApplyConfiguration constructs a declarative configuration of the SubnetFilter type for use with
// apply.
func SubnetFilter() *SubnetFilterApplyConfiguration {
	return &SubnetFilterApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *SubnetFilterApplyConfiguration) WithName(value v1alpha1.OpenStackName) *SubnetFilterApplyConfiguration {
	b.Name = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *SubnetFilterApplyConfiguration) WithDescription(value v1alpha1.OpenStackDescription) *SubnetFilterApplyConfiguration {
	b.Description = &value
	return b
}

// WithProjectID sets the ProjectID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProjectID field is set to the value of the last call.
func (b *SubnetFilterApplyConfiguration) WithProjectID(value v1alpha1.UUID) *SubnetFilterApplyConfiguration {
	b.ProjectID = &value
	return b
}

// WithIPVersion sets the IPVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPVersion field is set to the value of the last call.
func (b *SubnetFilterApplyConfiguration) WithIPVersion(value v1alpha1.IPVersion) *SubnetFilterApplyConfiguration {
	b.IPVersion = &value
	return b
}

// WithGatewayIP sets the GatewayIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GatewayIP field is set to the value of the last call.
func (b *SubnetFilterApplyConfiguration) WithGatewayIP(value v1alpha1.IPvAny) *SubnetFilterApplyConfiguration {
	b.GatewayIP = &value
	return b
}

// WithCIDR sets the CIDR field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CIDR field is set to the value of the last call.
func (b *SubnetFilterApplyConfiguration) WithCIDR(value v1alpha1.CIDR) *SubnetFilterApplyConfiguration {
	b.CIDR = &value
	return b
}

// WithIPv6 sets the IPv6 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPv6 field is set to the value of the last call.
func (b *SubnetFilterApplyConfiguration) WithIPv6(value *IPv6OptionsApplyConfiguration) *SubnetFilterApplyConfiguration {
	b.IPv6 = value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *SubnetFilterApplyConfiguration) WithTags(values ...v1alpha1.NeutronTag) *SubnetFilterApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithTagsAny adds the given value to the TagsAny field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TagsAny field.
func (b *SubnetFilterApplyConfiguration) WithTagsAny(values ...v1alpha1.NeutronTag) *SubnetFilterApplyConfiguration {
	for i := range values {
		b.TagsAny = append(b.TagsAny, values[i])
	}
	return b
}

// WithNotTags adds the given value to the NotTags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NotTags field.
func (b *SubnetFilterApplyConfiguration) WithNotTags(values ...v1alpha1.NeutronTag) *SubnetFilterApplyConfiguration {
	for i := range values {
		b.NotTags = append(b.NotTags, values[i])
	}
	return b
}

// WithNotTagsAny adds the given value to the NotTagsAny field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NotTagsAny field.
func (b *SubnetFilterApplyConfiguration) WithNotTagsAny(values ...v1alpha1.NeutronTag) *SubnetFilterApplyConfiguration {
	for i := range values {
		b.NotTagsAny = append(b.NotTagsAny, values[i])
	}
	return b
}
